{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(mv:*)"
    ],
    "deny": []
  },
  "hooks": {
    "on_tool_call": {
      "command": "bash",
      "args": [
        "-c",
        "echo \"$CLAUDE_TOOL_CALL\" | jq -r 'if .name == \"Task\" or .name == \"TodoWrite\" or .name == \"Write\" or .name == \"MultiEdit\" or .name == \"Edit\" then \"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] \" + (.name) + \" - \" + (.parameters.description // .parameters.file_path // \"Action executed\") else empty end' >> /workspace/Demo/logs/activity_log.txt"
      ]
    },
    "on_tool_result": {
      "command": "bash", 
      "args": [
        "-c",
        "if [ \"$CLAUDE_TOOL_NAME\" = \"Write\" ] || [ \"$CLAUDE_TOOL_NAME\" = \"Edit\" ] || [ \"$CLAUDE_TOOL_NAME\" = \"MultiEdit\" ]; then echo \"$CLAUDE_TOOL_CALL\" | jq -r 'if .parameters.file_path and (.parameters.file_path | test(\"coding_log|work_notes|detailed_spec|unit_test|integration_test\")) then \"[\" + (now | strftime(\"%Y-%m-%d %H:%M:%S\")) + \"] Developer Work Log - \" + .parameters.file_path + \": \" + (.parameters.description // \"File modified\") else empty end' >> /workspace/Demo/logs/developer_work_log.txt; fi"
      ]
    },
    "on_git_command": {
      "command": "bash",
      "args": [
        "-c",
        "echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Git Command: $CLAUDE_BASH_COMMAND\" >> /workspace/Demo/logs/git_activity_log.txt"
      ]
    }
  }
}